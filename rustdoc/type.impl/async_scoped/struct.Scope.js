(function() {var type_impls = {
"async_scoped":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Scope%3C'a,+T,+Sp%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#35-105\">source</a><a href=\"#impl-Scope%3C'a,+T,+Sp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static, Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt; + <a class=\"trait\" href=\"async_scoped/spawner/trait.Blocker.html\" title=\"trait async_scoped::spawner::Blocker\">Blocker</a>&gt; <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.create\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#40-49\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"async_scoped/struct.Scope.html#tymethod.create\" class=\"fn\">create</a>(spawner: Sp) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a Scope object.</p>\n<p>This function is unsafe as <code>futs</code> may hold futures\nwhich have to be manually driven to completion.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#59-67\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_scoped/struct.Scope.html#tymethod.spawn\" class=\"fn\">spawn</a>&lt;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'a&gt;(&amp;mut self, f: F)</h4></section></summary><div class=\"docblock\"><p>Spawn a future with the executor’s <code>task::spawn</code> functionality. The\nfuture is expected to be driven to completion before ’a expires.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_cancellable\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#76-85\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_scoped/struct.Scope.html#tymethod.spawn_cancellable\" class=\"fn\">spawn_cancellable</a>&lt;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = T&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'a, Fu: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'a&gt;(\n    &amp;mut self,\n    f: F,\n    default: Fu\n)</h4></section></summary><div class=\"docblock\"><p>Spawn a cancellable future with the executor’s <code>task::spawn</code>\nfunctionality.</p>\n<p>The future is cancelled if the <code>Scope</code> is dropped\npre-maturely. It can also be cancelled by explicitly\ncalling (and awaiting) the <code>cancel</code> method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.spawn_blocking\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#93-104\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_scoped/struct.Scope.html#tymethod.spawn_blocking\" class=\"fn\">spawn_blocking</a>&lt;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; T + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'a&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.FuncSpawner.html\" title=\"trait async_scoped::spawner::FuncSpawner\">FuncSpawner</a>&lt;T, SpawnHandle = &lt;Sp as <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"async_scoped/spawner/trait.Spawner.html#associatedtype.SpawnHandle\" title=\"type async_scoped::spawner::Spawner::SpawnHandle\">SpawnHandle</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Spawn a function as a blocking future with executor’s <code>spawn_blocking</code>\nfunctionality.</p>\n<p>The future is cancelled if the <code>Scope</code> is dropped\npre-maturely. It can also be cancelled by explicitly\ncalling (and awaiting) the <code>cancel</code> method.</p>\n</div></details></div></details>",0,"async_scoped::TokioScope"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Scope%3C'a,+T,+Sp%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#107-140\">source</a><a href=\"#impl-Scope%3C'a,+T,+Sp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt; + <a class=\"trait\" href=\"async_scoped/spawner/trait.Blocker.html\" title=\"trait async_scoped::spawner::Blocker\">Blocker</a>&gt; <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cancel\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#110-114\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_scoped/struct.Scope.html#tymethod.cancel\" class=\"fn\">cancel</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Cancel all futures spawned with cancellation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#118-120\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_scoped/struct.Scope.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Total number of futures spawned in this scope.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remaining\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#124-126\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_scoped/struct.Scope.html#tymethod.remaining\" class=\"fn\">remaining</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Number of futures remaining in this scope.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.collect\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#130-139\">source</a><h4 class=\"code-header\">pub async fn <a href=\"async_scoped/struct.Scope.html#tymethod.collect\" class=\"fn\">collect</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Sp::<a class=\"associatedtype\" href=\"async_scoped/spawner/trait.Spawner.html#associatedtype.FutureOutput\" title=\"type async_scoped::spawner::Spawner::FutureOutput\">FutureOutput</a>&gt;</h4></section></summary><div class=\"docblock\"><p>A slighly optimized <code>collect</code> on the stream. Also\nuseful when we can not move out of self.</p>\n</div></details></div></details>",0,"async_scoped::TokioScope"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Scope%3C'a,+T,+Sp%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_scoped/usage.rs.html#4-94\">source</a><a href=\"#impl-Scope%3C'a,+T,+Sp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt; + <a class=\"trait\" href=\"async_scoped/spawner/trait.Blocker.html\" title=\"trait async_scoped::spawner::Blocker\">Blocker</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>&gt; <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.scope\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/usage.rs.html#25-34\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"async_scoped/struct.Scope.html#tymethod.scope\" class=\"fn\">scope</a>&lt;R, F&gt;(f: F) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.tuple.html\">(Self, R)</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt; + <a class=\"trait\" href=\"async_scoped/spawner/trait.Blocker.html\" title=\"trait async_scoped::spawner::Blocker\">Blocker</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;) -&gt; R,</div></h4></section></summary><div class=\"docblock\"><p>Creates a <code>Scope</code> to spawn non-’static futures. The\nfunction is called with a block which takes an <code>&amp;mut Scope</code>. The <code>spawn</code> method on this arg. can be used to\nspawn “local” futures.</p>\n<h5 id=\"returns\"><a class=\"doc-anchor\" href=\"#returns\">§</a>Returns</h5>\n<p>The function returns the created <code>Scope</code>, and the return\nvalue of the block passed to it. The returned stream and\nis expected to be driven completely before being\nforgotten. Dropping this stream causes the stream to be\ndriven <em>while blocking the current thread</em>. The values\nreturned from the stream are the output of the futures\nspawned.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The returned stream is expected to be run to completion\nbefore being forgotten. Dropping it is okay, but blocks\nthe current thread until all spawned futures complete.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scope_and_block\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/usage.rs.html#56-65\">source</a><h4 class=\"code-header\">pub fn <a href=\"async_scoped/struct.Scope.html#tymethod.scope_and_block\" class=\"fn\">scope_and_block</a>&lt;R, F&gt;(f: F) -&gt; (R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Sp::<a class=\"associatedtype\" href=\"async_scoped/spawner/trait.Spawner.html#associatedtype.FutureOutput\" title=\"type async_scoped::spawner::Spawner::FutureOutput\">FutureOutput</a>&gt;)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt; + <a class=\"trait\" href=\"async_scoped/spawner/trait.Blocker.html\" title=\"trait async_scoped::spawner::Blocker\">Blocker</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;) -&gt; R,</div></h4></section></summary><div class=\"docblock\"><p>A function that creates a scope and immediately awaits,\n<em>blocking the current thread</em> for spawned futures to\ncomplete. The outputs of the futures are collected as a\n<code>Vec</code> and returned along with the output of the block.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This function is safe to the best of our understanding\nas it blocks the current thread until the stream is\ndriven to completion, implying that all the spawned\nfutures have completed too. However, care must be taken\nto ensure a recursive usage of this function doesn’t\nlead to deadlocks.</p>\n<p>When scope is used recursively, you may also use the\nunsafe <code>scope_and_*</code> functions as long as this function\nis used at the top level. In this case, either the\nrecursively spawned should have the same lifetime as the\ntop-level scope, or there should not be any spurious\nfuture cancellations within the top level scope.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.scope_and_collect\" class=\"method\"><a class=\"src rightside\" href=\"src/async_scoped/usage.rs.html#85-93\">source</a><h4 class=\"code-header\">pub async unsafe fn <a href=\"async_scoped/struct.Scope.html#tymethod.scope_and_collect\" class=\"fn\">scope_and_collect</a>&lt;R, F&gt;(f: F) -&gt; (R, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Sp::<a class=\"associatedtype\" href=\"async_scoped/spawner/trait.Spawner.html#associatedtype.FutureOutput\" title=\"type async_scoped::spawner::Spawner::FutureOutput\">FutureOutput</a>&gt;)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + 'static,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;) -&gt; R,</div></h4></section></summary><div class=\"docblock\"><p>An asynchronous function that creates a scope and\nimmediately awaits the stream. The outputs of the\nfutures are collected as a <code>Vec</code> and returned along with\nthe output of the block.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This function is <em>not completely safe</em>: please see\n<code>cancellation_soundness</code> in <a href=\"https://github.com/rmanoka/async-scoped/blob/master/src/tests.rs\">tests.rs</a> for a\ntest-case that suggests how this can lead to invalid\nmemory access if not dealt with care.</p>\n<p>The caller must ensure that the lifetime ’a is valid\nuntil the returned future is fully driven. Dropping the\nfuture is okay, but blocks the current thread until all\nspawned futures complete.</p>\n</div></details></div></details>",0,"async_scoped::TokioScope"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Stream-for-Scope%3C'a,+T,+Sp%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#142-152\">source</a><a href=\"#impl-Stream-for-Scope%3C'a,+T,+Sp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt; + <a class=\"trait\" href=\"async_scoped/spawner/trait.Blocker.html\" title=\"trait async_scoped::spawner::Blocker\">Blocker</a>&gt; <a class=\"trait\" href=\"futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"futures_core/stream/trait.Stream.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;Sp as <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt;&gt;::<a class=\"associatedtype\" href=\"async_scoped/spawner/trait.Spawner.html#associatedtype.FutureOutput\" title=\"type async_scoped::spawner::Spawner::FutureOutput\">FutureOutput</a></h4></section></summary><div class='docblock'>Values yielded by the stream.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.poll_next\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#145-147\">source</a><a href=\"#method.poll_next\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_core/stream/trait.Stream.html#tymethod.poll_next\" class=\"fn\">poll_next</a>(\n    self: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.1/core/pin/struct.Pin.html\" title=\"struct core::pin::Pin\">Pin</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.reference.html\">&amp;mut Self</a>&gt;,\n    cx: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.1/core/task/wake/struct.Context.html\" title=\"struct core::task::wake::Context\">Context</a>&lt;'_&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.1/core/task/poll/enum.Poll.html\" title=\"enum core::task::poll::Poll\">Poll</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"futures_core/stream/trait.Stream.html#associatedtype.Item\" title=\"type futures_core::stream::Stream::Item\">Item</a>&gt;&gt;</h4></section></summary><div class='docblock'>Attempt to pull out the next value of this stream, registering the\ncurrent task for wakeup if the value is not yet available, and returning\n<code>None</code> if the stream is exhausted. <a href=\"futures_core/stream/trait.Stream.html#tymethod.poll_next\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.size_hint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#149-151\">source</a><a href=\"#method.size_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"futures_core/stream/trait.Stream.html#method.size_hint\" class=\"fn\">size_hint</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.1/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class='docblock'>Returns the bounds on the remaining length of the stream. <a href=\"futures_core/stream/trait.Stream.html#method.size_hint\">Read more</a></div></details></div></details>","Stream","async_scoped::TokioScope"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Scope%3C'a,+T,+Sp%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#22\">source</a><a href=\"#impl-Drop-for-Scope%3C'a,+T,+Sp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt; + <a class=\"trait\" href=\"async_scoped/spawner/trait.Blocker.html\" title=\"trait async_scoped::spawner::Blocker\">Blocker</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#22\">source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.1/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.77.1/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","async_scoped::TokioScope"],["<section id=\"impl-Unpin-for-Scope%3C'a,+T,+Sp%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_scoped/scoped.rs.html#22\">source</a><a href=\"#impl-Unpin-for-Scope%3C'a,+T,+Sp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'pin, 'a, T, Sp: <a class=\"trait\" href=\"async_scoped/spawner/trait.Spawner.html\" title=\"trait async_scoped::spawner::Spawner\">Spawner</a>&lt;T&gt; + <a class=\"trait\" href=\"async_scoped/spawner/trait.Blocker.html\" title=\"trait async_scoped::spawner::Blocker\">Blocker</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for <a class=\"struct\" href=\"async_scoped/struct.Scope.html\" title=\"struct async_scoped::Scope\">Scope</a>&lt;'a, T, Sp&gt;<div class=\"where\">where\n    __Scope&lt;'pin, 'a, T, Sp&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.1/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,</div></h3></section>","Unpin","async_scoped::TokioScope"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()